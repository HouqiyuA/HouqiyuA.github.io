<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>bb</title>
    <link href="/2023/07/05/bb/"/>
    <url>/2023/07/05/bb/</url>
    
    <content type="html"><![CDATA[<p>asdfsdh</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>aaa</title>
    <link href="/2023/07/05/aaa/"/>
    <url>/2023/07/05/aaa/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes</title>
    <link href="/2023/07/05/Kubernetes/"/>
    <url>/2023/07/05/Kubernetes/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h2 id="一-、应用部署三大阶段"><a href="#一-、应用部署三大阶段" class="headerlink" title="一 、应用部署三大阶段"></a>一 、应用部署三大阶段</h2><p><img src="/%E4%BC%A0%E7%BB%9F%E9%83%A8%E7%BD%B2%E4%B8%8E%E8%99%9A%E6%8B%9F%E5%8C%96%E9%83%A8%E7%BD%B2.png" alt="截屏2023-07-03 09.42.01"></p><p><img src="/%E5%9B%BE%E7%89%87/%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2.png" alt="截屏2023-07-03 09.52.24"></p><p>传统部署：环境不隔离</p><p>虚拟化部署：环境过度隔离，每个虚拟机内部又要重新装一个操作系统。</p><p>容器部署：容器内部没有硬件设备模拟，很好解决了以上两个问题 ，容器的启动效率更高</p><p><strong>一些问题：</strong></p><p>传统部署方式ip会很稳定，容器化部署中容器相当于一个壳子 ，意味着容器的生命周期很短。当容器删除时文件系统网络等都会改变，从而会影响一些服务。这些问题k8s都能够解决。</p><h3 id="K8s的特点"><a href="#K8s的特点" class="headerlink" title="K8s的特点"></a>K8s的特点</h3><ul><li><p>自我修复</p><p>自动检测容器是否发生错误，若出现错误会基于原来的容器重新copy一个出来</p></li><li><p>弹性伸缩</p><p>自动基于原来的容器进行扩容</p></li><li><p>自动部署和回滚</p><p>挨个更新，保证无论如何都有一个容器可用，用户不会感知这次更新</p></li><li><p>服务发现与负载均衡</p></li><li><p>机密和配置管理</p></li><li><p>存储编排</p><p> 把所有机器的存储资源管理成虚拟磁盘 ，容器访问虚拟磁盘，最后被映射成物理磁盘。</p></li></ul><hr><h2 id="二、集群架构与组件"><a href="#二、集群架构与组件" class="headerlink" title="二、集群架构与组件"></a>二、集群架构与组件</h2><h3 id="Borg架构"><a href="#Borg架构" class="headerlink" title="Borg架构"></a>Borg架构</h3><img src="Borg架构.png" alt="截屏2023-07-03 10.18.01" style="zoom:50%;" /><p>主从调度。Borglet是从节点，BrogMaster去协调各个节点。</p><h3 id="K8s架构"><a href="#K8s架构" class="headerlink" title="K8s架构"></a>K8s架构</h3><img src="Kubernetes Architecture.png" alt="截屏2023-07-03 11.07.35" style="zoom:50%;" /><p><strong>注：</strong></p><ol><li>节点分为主节点和从节点，只有从节点才部署对应的任务，主节点可以既作为主节点也可以作为从节点。</li><li>所有的操作有一个汇聚一点api-server，维护所有api功能。 </li><li>我们使用命令行进行操作，对k8s来说都是http请求。命令行都是操作api的。</li></ol><h3 id="相关组件"><a href="#相关组件" class="headerlink" title="相关组件"></a>相关组件</h3><img src="k8s架构.png" alt="截屏2023-07-03 10.36.11" style="zoom:50%;" /><p>通过UI或者命令行调用APi来操作master</p><h5 id="kubectl命令行工具"><a href="#kubectl命令行工具" class="headerlink" title="kubectl命令行工具"></a>kubectl命令行工具</h5><h5 id="Dashboad可视化界面UI"><a href="#Dashboad可视化界面UI" class="headerlink" title="Dashboad可视化界面UI"></a>Dashboad可视化界面UI</h5><h3 id="控制面板组件（Master）"><a href="#控制面板组件（Master）" class="headerlink" title="控制面板组件（Master）"></a>控制面板组件（Master）</h3><p><img src="/2023/07/05/Kubernetes/Master%E8%8A%82%E7%82%B9.png" alt="Master节点"></p><h5 id="api-server"><a href="#api-server" class="headerlink" title="api-server"></a>api-server</h5><p>接口服务：基于REST开放k8s接口服务</p><h5 id="controller-manager"><a href="#controller-manager" class="headerlink" title="controller-manager"></a>controller-manager</h5><p>控制管理器：负责运行控制器进程，每个控制器都是一个单独的进程，但是为<strong>了降低复杂性，他们都被编译到同一个可执行文件</strong>，并在同一个进程中运行管理各个类型的控制器。<em>实现节点控制，任务控制，端点分片，服务账号控制。</em>针对k8s中各种资源进行管理。</p><h5 id="cloud-controller-manager"><a href="#cloud-controller-manager" class="headerlink" title="cloud-controller-manager"></a>cloud-controller-manager</h5><p>云控制器管理器：第三方云平台提供的控制器API对接管理功能</p><h5 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h5><p>调度器：负责将Pod<strong>基于一定算法</strong>，将其调用到合适的节点上。</p><h5 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h5><p>理解为k8s的数据库，键值类型存储的分布式数据库，提供基于Raft算法实现自主的集群高可用。老版本：基于内存。新版本。</p><h3 id="普通节点"><a href="#普通节点" class="headerlink" title="普通节点"></a>普通节点</h3><p><img src="/2023/07/05/Kubernetes/%E6%99%AE%E9%80%9A%E8%8A%82%E7%82%B9.png" alt="普通节点"></p><h5 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h5><p>负责Pod生命周期、存储、网络。</p><h5 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h5><p>网络代理，负责Service的服务发展。负载均衡（4层负载）</p><h5 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h5><p>一个可运行多个容器</p><h5 id="container-runtime"><a href="#container-runtime" class="headerlink" title="container-runtime"></a>container-runtime</h5><p>容器运行时环境：docker、containerd、CRI-O</p><p><strong>注：所有节点都依赖于API-Server，最终操作会落到Pod上面。</strong></p><hr><h2 id="三、核心概念与专业术语"><a href="#三、核心概念与专业术语" class="headerlink" title="三、核心概念与专业术语"></a>三、核心概念与专业术语</h2><h3 id="有状态与无状态"><a href="#有状态与无状态" class="headerlink" title="有状态与无状态"></a>有状态与无状态</h3><p><img src="/2023/07/05/Kubernetes/%E6%9C%89%E7%8A%B6%E6%80%81%E4%B8%8E%E6%97%A0%E7%8A%B6%E6%80%81.png" alt="有状态与无状态"></p><p><strong>无状态：</strong></p><p>代表应用：Nginx，Apache</p><p>优点：对客户端透明，可以高效试下你扩容、迁移。</p><p>缺点：不能存储数据，需要额外的数据服务支持</p><h3 id="资源和对象"><a href="#资源和对象" class="headerlink" title="资源和对象"></a>资源和对象</h3><p>k8s中所有内容都被抽象为‘资源’，如Pod、Service、Node等都是资源。“对象”就是“资源”的实例，是持久化的实体 如某个Pod、某个具体的Node，k8s使用这些实体去表示集群状态，对象的创建、删除、修改都是通过k8s api来进行操作。</p><p><strong>资源的分类</strong></p><p><img src="/2023/07/05/Kubernetes/%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB.png" alt="资源分类"></p><ol><li><p>元数据</p><p>对资源的元数据描述，每一个资源都可以使用元空间的数据</p></li><li><p>集群</p><p>集群级别的资源作用与集群之上，集群下所有资源可以享用。</p></li><li><p>命名空间</p><p>命名空间级别的资源，作用在命名空间之上，通常只能在该命名空间范围内使用</p></li></ol><h5 id="元数据类型级"><a href="#元数据类型级" class="headerlink" title="元数据类型级"></a>元数据类型级</h5><ol><li><p>Hori zontal Pod Autoscaler</p><p>Pod自动扩容，可以根据CPU使用率自定义指标自动对Pod进行扩容和缩容</p></li><li><p>PodTemplate</p></li><li><p>LimiteRange</p><p>可以对集群内Request和Limits的配置做一个全局的限制，相当于批量设置了某一范围内（某个命名空间）的Pod的资源使用限制</p></li></ol><h5 id="集群级"><a href="#集群级" class="headerlink" title="集群级"></a>集群级</h5><ol><li><p>Namespace</p></li><li><p>Node（相当于一个服务器）</p><p>不像其他的资源如（Pod个Namespace），Node本质上不是K8s来创建的，<strong>K8s只是管理Bode上的资源</strong>，虽然可以通过Mainfest创建一个Node对象但K8s也只是去检查是否是有3这么一个Node，如果检查失败，也不会向上调度Pod</p></li><li><p>ClusterRole</p><p>用于对集群权限进行管理</p></li><li><p>ClusterRoleBingding</p><p>让资源与权限进行绑定</p></li></ol><h5 id="命名空间级"><a href="#命名空间级" class="headerlink" title="命名空间级"></a>命名空间级</h5><h6 id="1-工作负载级"><a href="#1-工作负载级" class="headerlink" title="1. 工作负载级"></a>1. 工作负载级</h6><p><strong>Pod</strong></p><p><img src="/2023/07/05/Kubernetes/pod.png" alt="pod"></p><p>Pod（容器组）是K8s中最小的可部署单元，<strong>一个Pod（容器组）包含了一个应用程序容器（某些情况下是多个容器）、存储资源，一个唯一的网络ip地址</strong>，以及一些确定容器该如何运行的选项，Pod容器组代表了k8s中一个独立的应用程序运行实力，该实例可能由单个或几个紧耦合在一起的容器组成。</p><p><img src="/2023/07/05/Kubernetes/pause%E5%AE%B9%E5%99%A8.png" alt="pause容器"></p><p>通过pause容器来实现 pod内部多个容器对网络文件系统的共享</p><p><strong>一个pod内有相同的网络空间，相同的进程名，相同的主机名。</strong>*</p><p><strong><u>1. Pod副本</u></strong></p><p>引入‘副本’的概念——一个Pod可以被复制成多分，每一份被称之为一个“副本”，这些“副本”除了一些描述的信息（Pod的名字、uid等）不一样意外，其他信息都是一样的，譬如Pod内部的容器，容器数量，容器里面运行的应用等，这些信息都是一样的，这些副本提供同样的功能。</p><p><u><strong>2. Pod控制器</strong></u></p><p>Pod的”控制器“通常包含一个名为<strong>”replicas“的属性</strong>，”replicas“属性则指定了特定Pod的副本数量，当集群中该Pod的数量与该属性置顶的值不一致时，k8s会采用一些策略去使得当前状态满足配置的要求。每个控制器都是一个pod对象。控制器管理着pod，管理pod怎么去创建，控制器不止一种。</p><p>**<u>控制器分类</u>**：</p><p><img src="/2023/07/05/Kubernetes/Pod%E6%8E%A7%E5%88%B6%E5%99%A8.png" alt="Pod控制器"></p><p><u>a. 适用无状态服务：</u></p><ol><li><p>Replication Controller(RC):</p><p><em>帮助我们动态更新Pod副本数。基于原本模版创建，根据Rplace，需要与Pod进行绑定</em></p></li><li><p>Replica Set（RS）:</p><p>帮助我们动态更新Pod的副本书，可以通过selector来选择对哪些pod生效</p></li><li><p><strong>Delopyment：</strong></p><p>RC，RS只有扩容和缩容，针对RS的更高层次的封装，提供了更丰富的部署相关的功能。</p><ul><li><p>不用描述RS，可以直接创建Replica Set&#x2F;Pod</p></li><li><p>滚动升级&#x2F;回滚</p><p><img src="/2023/07/05/Kubernetes/%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0.png" alt="滚动更新"></p><p>滚动升级会更根据RS1创建一个RS2，升级RS2里面的Pod再依此替换老旧的版本，不用将应用全部停掉。同时不删除旧版本保证可以回滚。  </p></li><li><p>平滑扩容和缩容</p></li><li><p>暂停与恢复</p></li></ul></li></ol><p><u>b. 适用于有状态服务</u></p><ol><li><p>statefulset</p><img src="statefulset.png" alt="statefulset" style="zoom:50%;" /><p>提供给稳定的持久化存储，稳定的网络标志，由徐部署，有序扩展，有收缩，有序删除。</p><p> 组成：（1）Headless Service：用于定义网络标志（Domain Name Service）Domain name server：域名服务，将域名与ip绑定映射关系，使用服务名来当域名，会自动绑定一个地址（2）volumeClaimTemplate。</p></li></ol><p><u>c. 守护进程</u></p><p><img src="/2023/07/05/Kubernetes/Daemonset.png" alt="Daemonset"></p><p>DaemonSet保<strong>证在每个Node上运行一个容器副本</strong>，常用来部署一些集群的日志、监控或者其他管理应用，典型的应用包括：</p><ul><li><p>日志收集：比如fluentd ，logstash等</p></li><li><p>系统监控，比如 Prometheus Node Exporter</p></li><li><p>系统程序，比如kube-proxy，kube-dns等</p><p><strong>注：以上三种控制器会持续运行，出错会重新运行。</strong></p></li></ul><p>d. 任务&#x2F;定时任务</p><ol><li>job：一次性运行的任务，运行完成后Pod销毁，不再重新启动新容器</li><li>Cronjob:周期性执行的任务</li></ol><h6 id="2-服务发现"><a href="#2-服务发现" class="headerlink" title="2. 服务发现"></a>2. 服务发现</h6><p><img src="/2023/07/05/Kubernetes/%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE%E6%A8%A1%E5%9E%8B.png" alt="网络访问模型"></p><p><img src="/2023/07/05/Kubernetes/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%BA%94%E7%94%A8.png" alt="服务发现应用"></p><ul><li>Service ：k8s集群内部的网络通信 ，解决横向流量东西流量的问题</li><li>Ingress：实现将K8s内部服务暴露给外网络访问的服务，ingress-nigx 反向代理，负载均衡（七层负载）解决纵向流量南北流量</li></ul><h6 id="3-存储"><a href="#3-存储" class="headerlink" title="3.存储"></a>3.存储</h6><p>Volume 数据卷，共享Pod中容器使用的数据，用来持久化的数据，比如数据库数据。</p><p>CSI：容器标准化接口。方便使用插件</p><h6 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h6><ol><li>ConfigMap  存储key-value，把configMap加载到容器里方便容器使用这些参数，这样将参数分离出来方便修改。</li><li>Secret 加密</li><li>DownwardAPI 把Pod的信息共享到容器里。可以通过环境变量或volume挂载的方式</li></ol><h6 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h6><ol><li>Role:定义一组命名空间的权限</li><li>RoleBinding</li></ol><h3 id="对象规约和状态"><a href="#对象规约和状态" class="headerlink" title="对象规约和状态"></a>对象规约和状态</h3><p><strong>Spec是规约</strong>，规格的意思，<strong>spec是必须的</strong>，他描述了对象期望状态（Desired State）———希望对象所具有的特征，当创建Kubernates对象时，必须提供对象的规约，用来描述对象的期望状态。</p><p>**状态 **：表示对象的实际状态，该属性由k8s自己维护，k8s会通过一系列的控制器对对应对象进行管理，让对象尽可能地让实际状态与期望状态重合。</p><h2 id="k8s集群搭建"><a href="#k8s集群搭建" class="headerlink" title="k8s集群搭建"></a>k8s集群搭建</h2><table><thead><tr><th align="center">角色</th><th align="center">IP地址</th><th align="center">实验画环境</th></tr></thead><tbody><tr><td align="center">Master</td><td align="center">192.168.2.131</td><td align="center">Cenos8.4</td></tr><tr><td align="center">Node1</td><td align="center">192.168.2.130</td><td align="center">Centos8.4</td></tr><tr><td align="center">Node2</td><td align="center">192.168.2.132</td><td align="center">Centos8.4</td></tr></tbody></table><p>未完待续……</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>虚拟化</tag>
      
      <tag>容器编排</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生</title>
    <link href="/2023/07/05/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    <url>/2023/07/05/%E4%BA%91%E5%8E%9F%E7%94%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
