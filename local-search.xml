<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2023/07/06/Docker/"/>
    <url>/2023/07/06/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>使用docker的目的是让应用的<strong>部署、测试、分发变得高效轻松</strong>。</p><h2 id="一-Docker-架构"><a href="#一-Docker-架构" class="headerlink" title="一 Docker 架构"></a>一 Docker 架构</h2><p><img src="/2023/07/06/Docker/Docker%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="Docker核心架构图"></p><ol><li>用户使用Docker Client与Docker Daemon建立通信，并发送请求给后者。</li><li>Docker Daemon作为Docker架构中的主体部分，首先提供Server的功能使其可以接受Docker Client的请求；</li><li>Engine执行Docker内部的一系列工作，<strong>每一项工作都是以一个Job的形式的存在。</strong></li><li>Job的运行过程中，当需要容器镜像时，则从Docker Registry中下载镜像，并通过<strong>镜像管理驱动graphdriver</strong>将下载镜像以Graph的形式存储；</li><li>当需要为Docker创建网络环境时，通过<strong>网络管理驱动networkdriver</strong>创建并配置Docker容器网络环境；</li><li>当需要限制Docker容器运行资源或执行用户指令等操作时，则通过<strong>execdrive</strong>r来完成。</li><li><strong>libcontainer是一项独立的容器管理包</strong>，networkdriver以及execdriver都是<strong>通过libcontainer来实现具体对容器进行的操作</strong>。</li></ol><blockquote><p>参考: <a href="https://www.huweihuang.com/docker-notes/basics/docker-architecture.html">https://www.huweihuang.com/docker-notes/basics/docker-architecture.html</a></p></blockquote><h2 id="二-使用镜像"><a href="#二-使用镜像" class="headerlink" title="二 使用镜像"></a>二 使用镜像</h2><h3 id="2-1拉取镜像"><a href="#2-1拉取镜像" class="headerlink" title="2.1拉取镜像"></a>2.1拉取镜像</h3><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">docker pull [选项][Docker Registry 地址[:端口号]&#x2F;]仓库名[:标签]##############################################################example:docker pull ubuntu:18.0418.04: Pulling from library&#x2F;ubuntu92dc2a97ff99: Pull completebe13a9d27eb8: Pull completec8299583700a: Pull completeDigest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26Status: Downloaded newer image for ubuntu:18.04docker.io&#x2F;library&#x2F;ubuntu:18.04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><code>[Docker Registry 地址[:端口号]/]</code> 是可选的 Docker Registry 地址和端口号，用于指定从哪个 Docker Registry 即（（<code>docker.io</code>））下载镜像。如果不给出镜像仓库地址将默认从Docker Hub上进行下载。</li><li>仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><p>如果要从私有 Docker Registry 中下载镜像，则可使用以下命令:</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">docker pull myregistry.example.com:5000&#x2F;myimage:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我们还可以使用<code>docker pull --help</code> 来查看选项:</p><p><img src="/2023/07/06/Docker/%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96%E5%91%BD%E4%BB%A4.png" alt="镜像拉取命令"></p><p><strong>这里对tags做出解释：</strong>tags代表标签，一个 Docker 镜像可以有多个标签，每个标签代表了该镜像的一个版本或者一个变体。例如，ubuntu 镜像可能有 latest、18.04、20.04 等多个标签，分别代表了 Ubuntu 的不同版本。</p><h3 id="2-2-运行"><a href="#2-2-运行" class="headerlink" title="2.2 运行"></a>2.2 运行</h3><p><code>docker run</code>命令可以使用一个镜像运行出一个容器</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">docker run -it --rm ubuntu:18.04 bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个命令的参数含义如下：</p><ul><li>-it：将容器的<strong>标准输入和输出连接到当前终端</strong>，并启动一个交互式的终端。</li><li>–rm：在容器退出后自动删除容器；</li><li>ubuntu:18.04：指定要使用的镜像，这里使用的是 Ubuntu 18.04 版本的镜像；</li><li>bash：在容器中运行的命令，这里是启动一个交互式的 bash 终端。</li></ul><p>运行这个命令后，会启动一个新的容器，使用 Ubuntu 18.04 镜像，并在容器中启动一个交互式的 bash 终端。您可以在终端中执行任何命令，就像在本地的终端中一样。</p><p><strong>注：</strong>这里的bash 是在容器启动后要执行的命令，也可以是其他命令或脚本。在这个命令中，<u>bash 命令会启动一个交互式的 bash 终端</u><u>，允许用户在容器中进行交互式的操作。</u></p><p>如果想在容器启动后使用其他命令的话可以使用以下例子</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">docker run -it --rm ubuntu:18.04 python &#x2F;path&#x2F;to&#x2F;script.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>此例子在容器启动后会执行一个python脚本。</p><h3 id="2-3-列出镜像"><a href="#2-3-列出镜像" class="headerlink" title="2.3 列出镜像"></a>2.3 列出镜像</h3><p><code>docker image ls</code>命令可以列出本地已有镜像。</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">$ docker image lsREPOSITORY           TAG                 IMAGE ID            CREATED             SIZEredis                latest              5f515359c7f8        5 days ago          183 MBnginx                latest              05a60462f8ba        5 days ago          181 MBmongo                3.2                 fe9198c04d62        5 days ago          342 MB&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MBubuntu               18.04               329ed837d508        3 days ago          63.3MBubuntu               bionic              329ed837d508        3 days ago          63.3MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里需要说明以下几点：</p><ul><li><code>REPOSTORY</code>：Repository 是 Docker 镜像的仓库名称，<u>表示 Docker 镜像所属的仓库或组织</u><ul><li><em>在 Docker Hub 上</em>，仓库名称通常是<strong>用户名或组织名，后面跟着斜杠和镜像名称</strong>。例如，ubuntu 镜像的仓库名称是 library&#x2F;ubuntu，其中 library 是 Docker Hub 默认的命名空间，用于存储公共的、官方的镜像。</li><li><em>在本地计算机上</em>，Docker 镜像的仓库名称通常是在下载镜像时指定的。若使用<code>docker pull ubuntu</code>下载镜像，则 Repository 列将显示为 ubuntu。</li><li>如果从私有 Docker Registry 中下载镜像，则仓库名称将包括 Registry 的地址和端口号<code>myregistry.example.com:5000/myimage。</code>。</li></ul></li><li><code>IMAGE ID</code>:本地计算机中唯一标识一个镜像</li><li><code>CREATED</code>：镜像创建的时间；</li><li><code>SIZE</code>：镜像的大小。</li></ul><p>若不列出本地所有镜像，使用<code>docker image ls ubuntu</code>可以列出所有仓库名为ubuntu的镜像</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">docker image ls ubuntuREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEubuntu              20.04               7e0aa2d69a15        3 weeks ago         72.8MBubuntu              latest              7e0aa2d69a15        3 weeks ago         72.8MBubuntu              18.04               2eb2d388e1a2        2 months ago        63.3MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>docker image ls</code>还支持以下选项</p><ul><li><code>-a</code> 或 <code>--all</code>：包括本地计算机上所有的 Docker 镜像，包括中间镜像和被标记为 <code>&lt;none&gt;</code> 的镜像；</li><li><code>--digests</code>：显示镜像的摘要信息；</li><li><code>-f</code> 或 <code>--filter</code>：根据指定的条件过滤要显示的镜像。例如，使用 <code>docker image ls -f dangling=true</code> 命令可以只显示被标记为 <code>&lt;none&gt;</code> 的镜像；</li><li><code>--format</code>：使用 Go 模板语言自定义输出结果的格式；</li><li><code>-q</code> 或 <code>--quiet</code>：只显示镜像的 ID，而不显示其他信息。</li></ul><h3 id="2-4-删除镜像"><a href="#2-4-删除镜像" class="headerlink" title="2.4 删除镜像"></a>2.4 删除镜像</h3><p><code>docker image rm</code>命令用于删除本地镜像</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]$ docker image lsREPOSITORY                  TAG                 IMAGE ID            CREATED             SIZEcentos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MBredis                       alpine              501ad78535f0        3 weeks ago         21.03 MBdocker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MBnginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>此处<code>&lt;镜像&gt;</code>可以是<code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。例如使用<strong>镜像短id</strong>来进行删除，可使用命令<code>docker image rm 501</code>。</li><li>要删除多个 Docker 镜像，可以在命令中列出多个镜像名称或 ID，以空格分隔。如<code>docker image rm myimage1 myimage2</code>。我们也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像，<code> docker image rm centos</code>。</li><li>可以使用 <code>-f</code> 或 <code>--force</code> 选项删除正在被容器使用的镜。</li></ul><p><strong>注意：</strong></p><p>镜像的<u>唯一标识是其 ID 和摘要，而一个镜像可以有多个标签</u>。使用上述命令对镜像删除的<strong>实质是将满足我们要求的所有镜像标签都取消</strong>，执行<code>Untagged</code>。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。</p><p><strong>镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。</strong>镜像的多层结构让镜像复用变得非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的原因。</p><p>除了镜像依赖以外，<strong>还需要注意的是容器对镜像的依赖</strong>。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，<strong>容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。</strong>因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p><h3 id="2-4-理解镜像构成"><a href="#2-4-理解镜像构成" class="headerlink" title="2.4 理解镜像构成"></a>2.4 理解镜像构成</h3><p><code>docker commit</code> 命令可以将容器的当前状态保存为一个新的镜像。</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">docker commit [选项] &lt;容器ID或名称&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层</p><p>以下以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">$ docker run --name webserver -d -p 80:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这条命令会用 <code>nginx</code> 镜像启动一个容器，命名为 <code>webserver</code>，并且映射了 80 端口。</p><p>该命令的各个参数含义如下：</p><ul><li><code>run</code>：启动一个新容器。</li><li><code>--name webserver</code>：指定容器的名称为 <code>webserver</code>。</li><li><code>-d</code>：指定容器在后台以守护进程的形式运行。</li><li><code>-p 80:80</code>：将主机的 80 端口映射到容器的 80 端口，以便可以通过主机的 IP 地址访问容器中的 Web 服务器。</li><li><code>nginx</code>：指定要在容器中运行的镜像名称，这里是 Nginx 镜像。</li></ul><p><img src="/2023/07/06/Docker/nginx%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%90%AF.png" alt="nginx服务开启"></p><p><img src="/2023/07/06/Docker/nginx%E6%9C%8D%E5%8A%A1%E6%9F%A5%E7%9C%8B.png" alt="nginx服务查看"></p><p>使用<code>docker exc</code>命令进入容器内部，用 <code>&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</code> 覆盖了<code>/usr/share/nginx/html/index.html</code> 的内容。</p><p><img src="/2023/07/06/Docker/%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8.png" alt="进入容器"></p><p>再次刷新，欢迎页已经发生改变。</p><p><img src="/2023/07/06/Docker/hello.png" alt="hello"></p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生安全</title>
    <link href="/2023/07/05/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8/"/>
    <url>/2023/07/05/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="云原生安全"><a href="#云原生安全" class="headerlink" title="云原生安全"></a>云原生安全</h1><p><strong>云原生</strong>：是一种软件开发和部署的方法论，旨在帮助开发者更好地在云端环境下构建和运行应用程序。云原生应用程序具有高度的可伸缩性、弹性和可靠性，能够更快地响应业务需求。（在云上设计应用程序）</p><p><strong>内生安全</strong>：在软件开发阶段就要注入安全的理念，不仅要确保软件的多有功能都是可预期的，还要努力做到不存在“可被利用的漏洞”。</p><p><strong>容器运行时（Container Runtime）</strong>是一种用于在容器内运行应用程序的<strong>软件</strong>，它提供了容器的<u>生命周期管理、资源隔离和安全性控制等功能</u>。容器运行时是容器化应用程序的基础设施，它可以帮助应用程序在不同的运行环境中实现一致的运行行为，提供更加便捷的部署和管理方式。</p><h2 id="第1章-云原生安全"><a href="#第1章-云原生安全" class="headerlink" title="第1章 云原生安全"></a>第1章 云原生安全</h2><h3 id="1-1-云原生：云计算下半场"><a href="#1-1-云原生：云计算下半场" class="headerlink" title="1.1 云原生：云计算下半场"></a>1.1 云原生：云计算下半场</h3><p>许多企业对基础设施进行了云化，但大多数都是<strong>利用开源IaaS系统构建的云平台</strong>，只是简单点地将传统物理主机、平台或应用转化为虚拟态。这样的云实践知识“形”上的改变，不是神上的改变。**<u>云计算下班上要解决业务在开发，运行整个生命周期中遇到问题。</u>**</p><p>云原生系统一般特征：</p><ol><li><p><strong>轻、快、不变的基础设施</strong></p><p>利用容器有轻和快的特点，在实践中去更新更为持久的化的镜像而<strong>不会在容器中安装或更新应用</strong>，通过编排系统下载新镜像并启动相应的容器即可，<strong>不改变容器运行时的模式</strong>。</p></li><li><p><strong>弹性服务编排</strong></p><p>云原生的焦点是业务而非基础设施</p></li><li><p><strong>开发运营一体化</strong></p><p>缩短软件开发周期</p></li><li><p>微服务架构</p></li><li><p>无服务模型</p></li></ol><h3 id="1-2-什么是云原生安全"><a href="#1-2-什么是云原生安全" class="headerlink" title="1.2 什么是云原生安全"></a>1.2 什么是云原生安全</h3><p><strong>云原生安全</strong>：面向云原生环境的安全和具有云原生特征的安全</p><p>原生安全：基于云原生且无处不在，即使用了云原生技术，适用于各类场景。</p><p>虚拟化安全关注的是资源，云原生安全关注的是应用。</p><p>容器安全和虚拟化安全的差别看似是隔离技术强度，但其实应该是生命周期。</p><p>容器逃逸等攻击手段往往利用操作系统层面隔离的漏洞，与终端上的恶意软件攻击手法不同。</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes</title>
    <link href="/2023/07/05/Kubernetes/"/>
    <url>/2023/07/05/Kubernetes/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h2 id="一-、应用部署三大阶段"><a href="#一-、应用部署三大阶段" class="headerlink" title="一 、应用部署三大阶段"></a>一 、应用部署三大阶段</h2><p><img src="/2023/07/05/Kubernetes/%E4%BC%A0%E7%BB%9F%E9%83%A8%E7%BD%B2%E4%B8%8E%E8%99%9A%E6%8B%9F%E5%8C%96%E9%83%A8%E7%BD%B2.png" alt="截屏2023-07-03 09.42.01"></p><p><img src="/2023/07/05/Kubernetes/%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2.png" alt="截屏2023-07-03 09.52.24"></p><p>传统部署：环境不隔离</p><p>虚拟化部署：环境过度隔离，每个虚拟机内部又要重新装一个操作系统。</p><p>容器部署：容器内部没有硬件设备模拟，很好解决了以上两个问题 ，容器的启动效率更高</p><p><strong>一些问题：</strong></p><p>传统部署方式ip会很稳定，容器化部署中容器相当于一个壳子 ，意味着容器的生命周期很短。当容器删除时文件系统网络等都会改变，从而会影响一些服务。这些问题k8s都能够解决。</p><h3 id="K8s的特点"><a href="#K8s的特点" class="headerlink" title="K8s的特点"></a>K8s的特点</h3><ul><li><p>自我修复</p><p>自动检测容器是否发生错误，若出现错误会基于原来的容器重新copy一个出来</p></li><li><p>弹性伸缩</p><p>自动基于原来的容器进行扩容</p></li><li><p>自动部署和回滚</p><p>挨个更新，保证无论如何都有一个容器可用，用户不会感知这次更新</p></li><li><p>服务发现与负载均衡</p></li><li><p>机密和配置管理</p></li><li><p>存储编排</p><p> 把所有机器的存储资源管理成虚拟磁盘 ，容器访问虚拟磁盘，最后被映射成物理磁盘。</p></li></ul><hr><h2 id="二、集群架构与组件"><a href="#二、集群架构与组件" class="headerlink" title="二、集群架构与组件"></a>二、集群架构与组件</h2><h3 id="Borg架构"><a href="#Borg架构" class="headerlink" title="Borg架构"></a>Borg架构</h3><img src="Borg架构.png" alt="截屏2023-07-03 10.18.01" style="zoom:50%;" /><p>主从调度。Borglet是从节点，BrogMaster去协调各个节点。</p><h3 id="K8s架构"><a href="#K8s架构" class="headerlink" title="K8s架构"></a>K8s架构</h3><img src="Kubernetes Architecture.png" alt="截屏2023-07-03 11.07.35" style="zoom:50%;" /><p><strong>注：</strong></p><ol><li>节点分为主节点和从节点，只有从节点才部署对应的任务，主节点可以既作为主节点也可以作为从节点。</li><li>所有的操作有一个汇聚一点api-server，维护所有api功能。 </li><li>我们使用命令行进行操作，对k8s来说都是http请求。命令行都是操作api的。</li></ol><h3 id="相关组件"><a href="#相关组件" class="headerlink" title="相关组件"></a>相关组件</h3><img src="k8s架构.png" alt="截屏2023-07-03 10.36.11"  /><p>通过UI或者命令行调用APi来操作master</p><h5 id="kubectl命令行工具"><a href="#kubectl命令行工具" class="headerlink" title="kubectl命令行工具"></a>kubectl命令行工具</h5><h5 id="Dashboad可视化界面UI"><a href="#Dashboad可视化界面UI" class="headerlink" title="Dashboad可视化界面UI"></a>Dashboad可视化界面UI</h5><h3 id="控制面板组件（Master）"><a href="#控制面板组件（Master）" class="headerlink" title="控制面板组件（Master）"></a>控制面板组件（Master）</h3><p><img src="/2023/07/05/Kubernetes/Master%E8%8A%82%E7%82%B9.png" alt="Master节点"></p><h5 id="api-server"><a href="#api-server" class="headerlink" title="api-server"></a>api-server</h5><p>接口服务：基于REST开放k8s接口服务</p><h5 id="controller-manager"><a href="#controller-manager" class="headerlink" title="controller-manager"></a>controller-manager</h5><p>控制管理器：负责运行控制器进程，每个控制器都是一个单独的进程，但是为<strong>了降低复杂性，他们都被编译到同一个可执行文件</strong>，并在同一个进程中运行管理各个类型的控制器。<em>实现节点控制，任务控制，端点分片，服务账号控制。</em>针对k8s中各种资源进行管理。</p><h5 id="cloud-controller-manager"><a href="#cloud-controller-manager" class="headerlink" title="cloud-controller-manager"></a>cloud-controller-manager</h5><p>云控制器管理器：第三方云平台提供的控制器API对接管理功能</p><h5 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h5><p>调度器：负责将Pod<strong>基于一定算法</strong>，将其调用到合适的节点上。</p><h5 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h5><p>理解为k8s的数据库，键值类型存储的分布式数据库，提供基于Raft算法实现自主的集群高可用。老版本：基于内存。新版本。</p><h3 id="普通节点"><a href="#普通节点" class="headerlink" title="普通节点"></a>普通节点</h3><p><img src="/2023/07/05/Kubernetes/%E6%99%AE%E9%80%9A%E8%8A%82%E7%82%B9.png" alt="普通节点"></p><h5 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h5><p>负责Pod生命周期、存储、网络。</p><h5 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h5><p>网络代理，负责Service的服务发展。负载均衡（4层负载）</p><h5 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h5><p>一个可运行多个容器</p><h5 id="container-runtime"><a href="#container-runtime" class="headerlink" title="container-runtime"></a>container-runtime</h5><p>容器运行时环境：docker、containerd、CRI-O</p><p><strong>注：所有节点都依赖于API-Server，最终操作会落到Pod上面。</strong></p><hr><h2 id="三、核心概念与专业术语"><a href="#三、核心概念与专业术语" class="headerlink" title="三、核心概念与专业术语"></a>三、核心概念与专业术语</h2><h3 id="有状态与无状态"><a href="#有状态与无状态" class="headerlink" title="有状态与无状态"></a>有状态与无状态</h3><p><img src="/2023/07/05/Kubernetes/%E6%9C%89%E7%8A%B6%E6%80%81%E4%B8%8E%E6%97%A0%E7%8A%B6%E6%80%81.png" alt="有状态与无状态"></p><p><strong>无状态：</strong></p><p>代表应用：Nginx，Apache</p><p>优点：对客户端透明，可以高效试下你扩容、迁移。</p><p>缺点：不能存储数据，需要额外的数据服务支持</p><h3 id="资源和对象"><a href="#资源和对象" class="headerlink" title="资源和对象"></a>资源和对象</h3><p>k8s中所有内容都被抽象为‘资源’，如Pod、Service、Node等都是资源。“对象”就是“资源”的实例，是持久化的实体 如某个Pod、某个具体的Node，k8s使用这些实体去表示集群状态，对象的创建、删除、修改都是通过k8s api来进行操作。</p><p><strong>资源的分类</strong></p><p><img src="/2023/07/05/Kubernetes/%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB.png" alt="资源分类"></p><ol><li><p>元数据</p><p>对资源的元数据描述，每一个资源都可以使用元空间的数据</p></li><li><p>集群</p><p>集群级别的资源作用与集群之上，集群下所有资源可以享用。</p></li><li><p>命名空间</p><p>命名空间级别的资源，作用在命名空间之上，通常只能在该命名空间范围内使用</p></li></ol><h5 id="元数据类型级"><a href="#元数据类型级" class="headerlink" title="元数据类型级"></a>元数据类型级</h5><ol><li><p>Hori zontal Pod Autoscaler</p><p>Pod自动扩容，可以根据CPU使用率自定义指标自动对Pod进行扩容和缩容</p></li><li><p>PodTemplate</p></li><li><p>LimiteRange</p><p>可以对集群内Request和Limits的配置做一个全局的限制，相当于批量设置了某一范围内（某个命名空间）的Pod的资源使用限制</p></li></ol><h5 id="集群级"><a href="#集群级" class="headerlink" title="集群级"></a>集群级</h5><ol><li><p>Namespace</p></li><li><p>Node（相当于一个服务器）</p><p>不像其他的资源如（Pod个Namespace），Node本质上不是K8s来创建的，<strong>K8s只是管理Bode上的资源</strong>，虽然可以通过Mainfest创建一个Node对象但K8s也只是去检查是否是有3这么一个Node，如果检查失败，也不会向上调度Pod</p></li><li><p>ClusterRole</p><p>用于对集群权限进行管理</p></li><li><p>ClusterRoleBingding</p><p>让资源与权限进行绑定</p></li></ol><h5 id="命名空间级"><a href="#命名空间级" class="headerlink" title="命名空间级"></a>命名空间级</h5><h6 id="1-工作负载级"><a href="#1-工作负载级" class="headerlink" title="1. 工作负载级"></a>1. 工作负载级</h6><p><strong>Pod</strong></p><p><img src="/2023/07/05/Kubernetes/pod.png" alt="pod"></p><p>Pod（容器组）是K8s中最小的可部署单元，<strong>一个Pod（容器组）包含了一个应用程序容器（某些情况下是多个容器）、存储资源，一个唯一的网络ip地址</strong>，以及一些确定容器该如何运行的选项，Pod容器组代表了k8s中一个独立的应用程序运行实力，该实例可能由单个或几个紧耦合在一起的容器组成。</p><p><img src="/2023/07/05/Kubernetes/pause%E5%AE%B9%E5%99%A8.png" alt="pause容器"></p><p>通过pause容器来实现 pod内部多个容器对网络文件系统的共享</p><p><strong>一个pod内有相同的网络空间，相同的进程名，相同的主机名。</strong>*</p><p><strong><u>1. Pod副本</u></strong></p><p>引入‘副本’的概念——一个Pod可以被复制成多分，每一份被称之为一个“副本”，这些“副本”除了一些描述的信息（Pod的名字、uid等）不一样意外，其他信息都是一样的，譬如Pod内部的容器，容器数量，容器里面运行的应用等，这些信息都是一样的，这些副本提供同样的功能。</p><p><u><strong>2. Pod控制器</strong></u></p><p>Pod的”控制器“通常包含一个名为<strong>”replicas“的属性</strong>，”replicas“属性则指定了特定Pod的副本数量，当集群中该Pod的数量与该属性置顶的值不一致时，k8s会采用一些策略去使得当前状态满足配置的要求。每个控制器都是一个pod对象。控制器管理着pod，管理pod怎么去创建，控制器不止一种。</p><p>**<u>控制器分类</u>**：</p><p><img src="/2023/07/05/Kubernetes/Pod%E6%8E%A7%E5%88%B6%E5%99%A8.png" alt="Pod控制器"></p><p><u>a. 适用无状态服务：</u></p><ol><li><p>Replication Controller(RC):</p><p><em>帮助我们动态更新Pod副本数。基于原本模版创建，根据Rplace，需要与Pod进行绑定</em></p></li><li><p>Replica Set（RS）:</p><p>帮助我们动态更新Pod的副本书，可以通过selector来选择对哪些pod生效</p></li><li><p><strong>Delopyment：</strong></p><p>RC，RS只有扩容和缩容，针对RS的更高层次的封装，提供了更丰富的部署相关的功能。</p><ul><li><p>不用描述RS，可以直接创建Replica Set&#x2F;Pod</p></li><li><p>滚动升级&#x2F;回滚</p><p><img src="/2023/07/05/Kubernetes/%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0.png" alt="滚动更新"></p><p>滚动升级会更根据RS1创建一个RS2，升级RS2里面的Pod再依此替换老旧的版本，不用将应用全部停掉。同时不删除旧版本保证可以回滚。  </p></li><li><p>平滑扩容和缩容</p></li><li><p>暂停与恢复</p></li></ul></li></ol><p><u>b. 适用于有状态服务</u></p><ol><li><p>statefulset</p><img src="statefulset.png" alt="statefulset" style="zoom:50%;" /><p>提供给稳定的持久化存储，稳定的网络标志，由徐部署，有序扩展，有收缩，有序删除。</p><p> 组成：（1）Headless Service：用于定义网络标志（Domain Name Service）Domain name server：域名服务，将域名与ip绑定映射关系，使用服务名来当域名，会自动绑定一个地址（2）volumeClaimTemplate。</p></li></ol><p><u>c. 守护进程</u></p><p><img src="/2023/07/05/Kubernetes/Daemonset.png" alt="Daemonset"></p><p>DaemonSet保<strong>证在每个Node上运行一个容器副本</strong>，常用来部署一些集群的日志、监控或者其他管理应用，典型的应用包括：</p><ul><li><p>日志收集：比如fluentd ，logstash等</p></li><li><p>系统监控，比如 Prometheus Node Exporter</p></li><li><p>系统程序，比如kube-proxy，kube-dns等</p><p><strong>注：以上三种控制器会持续运行，出错会重新运行。</strong></p></li></ul><p>d. 任务&#x2F;定时任务</p><ol><li>job：一次性运行的任务，运行完成后Pod销毁，不再重新启动新容器</li><li>Cronjob:周期性执行的任务</li></ol><h6 id="2-服务发现"><a href="#2-服务发现" class="headerlink" title="2. 服务发现"></a>2. 服务发现</h6><p><img src="/2023/07/05/Kubernetes/%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE%E6%A8%A1%E5%9E%8B.png" alt="网络访问模型"></p><p><img src="/2023/07/05/Kubernetes/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%BA%94%E7%94%A8.png" alt="服务发现应用"></p><ul><li>Service ：k8s集群内部的网络通信 ，解决横向流量东西流量的问题</li><li>Ingress：实现将K8s内部服务暴露给外网络访问的服务，ingress-nigx 反向代理，负载均衡（七层负载）解决纵向流量南北流量</li></ul><h6 id="3-存储"><a href="#3-存储" class="headerlink" title="3.存储"></a>3.存储</h6><p>Volume 数据卷，共享Pod中容器使用的数据，用来持久化的数据，比如数据库数据。</p><p>CSI：容器标准化接口。方便使用插件</p><h6 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h6><ol><li>ConfigMap  存储key-value，把configMap加载到容器里方便容器使用这些参数，这样将参数分离出来方便修改。</li><li>Secret 加密</li><li>DownwardAPI 把Pod的信息共享到容器里。可以通过环境变量或volume挂载的方式</li></ol><h6 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h6><ol><li>Role:定义一组命名空间的权限</li><li>RoleBinding</li></ol><h3 id="对象规约和状态"><a href="#对象规约和状态" class="headerlink" title="对象规约和状态"></a>对象规约和状态</h3><p><strong>Spec是规约</strong>，规格的意思，<strong>spec是必须的</strong>，他描述了对象期望状态（Desired State）———希望对象所具有的特征，当创建Kubernates对象时，必须提供对象的规约，用来描述对象的期望状态。</p><p>**状态 **：表示对象的实际状态，该属性由k8s自己维护，k8s会通过一系列的控制器对对应对象进行管理，让对象尽可能地让实际状态与期望状态重合。</p><h2 id="k8s集群搭建"><a href="#k8s集群搭建" class="headerlink" title="k8s集群搭建"></a>k8s集群搭建</h2><table><thead><tr><th align="center">角色</th><th align="center">IP地址</th><th align="center">实验画环境</th></tr></thead><tbody><tr><td align="center">Master</td><td align="center">192.168.2.131</td><td align="center">Cenos8.4</td></tr><tr><td align="center">Node1</td><td align="center">192.168.2.130</td><td align="center">Centos8.4</td></tr><tr><td align="center">Node2</td><td align="center">192.168.2.132</td><td align="center">Centos8.4</td></tr></tbody></table><p>未完待续……</p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>虚拟化</tag>
      
      <tag>容器编排</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
